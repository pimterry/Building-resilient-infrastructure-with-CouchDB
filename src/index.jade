doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Building resilient infrastructure with CouchDB

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/defaults.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1.title Building resilient infrastructure with <span class="couchdb">CouchDB</span>
        address.vcard
          div.author.fn Tim Perry
          div.note.bio
            span Tech Lead &amp; Open-Source Champion at 
            span.org.vcard
              a.org.fn.url(href='http://softwire.com',rel="group") Softwire
          ul.urls
            li
              a.url(href='http://tim-perry.co.uk',rel="me") tim-perry.co.uk
            li
              a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
            li
              a.url(href='http://github.com/pimterry',rel="me") github.com/pimterry
        aside
          ul
            li Tim Perry
            li Talk about CouchDb

      section
        img(src='images/softwireLogo.png',class='logo-big',alt='Softwire')
        aside
          ul
            li Who am I: I work for Softwire, London.
            li Bespoke dev on a huge variety of projects
            li One of which I want to talk about today
            li Softwire are hiring!
            li If you want to do things like this, apply, or talk to me afterwards

      section
        img(src='images/couchdb.svg',class='logo-big',alt='CouchDB')

        aside
          ul
            li Back to CouchDB though
            li Who's heard of CouchDB? Used? In Production?
            li Apache project
            li Core concept is 'relax'
            li Schema-free, simple to use, hard to break
            li Not focusing on CouchDB generally, but some of the basics:

      section
        h2 Document Store
        div
          pre
            code.language-javascript.
              {
                "_id": "my-document-example",
                "_rev": "21-qwe123asd",

                "some-content": {
                  "a": 1,
                  "b": 2
                },

                "a list!": [3, 4, 5]
              }
        aside
          ul
            li Document store
            li No joins
            li JSON
            li id
            li revision numbers (for concurrency, later)

      section
        h2 HTTP API
        div
          pre
            code.language-bash.
              $ curl -X GET http://couchdb:5984/my-db/a-doc-id

              {"_id": "a-doc-id"
               "_rev": "4-9812eojawd"
               "data": [1, 2, 3]}
        aside
          ul
            li Typical RESTful API
            li Stored in DBs
            li Access by DB + doc name
            li _id is name

      section
        h2 HTTP API
        div
          pre
            code.language-bash.
              $ curl -X PUT http://couchdb:5984/my-db/another-id \
                     -H 'Content-Type: application/json' \
                     -d '{ "other data": 4 }'

              {"ok":true,
               "id":"another-id",
               "rev":"1-2902191555"}
        aside
          ul
            li Can insert with specific ids, or without
            li Revision number is automatic

      section
        h2 Replication
        pre
          code.language-bash.
            # Push A -&gt; B
            $ curl -X POST http://couchdb-A:5984/_replicator \
                   -H 'Content-Type: application/json' \
                   -d '{ "source": "demo-db",
                         "target": "http://couchdb-B:5984/demo-db",
                         "continuous": true }'

            # Push B -&gt; A
            $ curl -X POST http://couchdb-B:5984/_replicator \
                   -H 'Content-Type: application/json' \
                   -d '{ "source": "demo-db",
                         "target": "http://couchdb-A:5984/demo-db",
                         "continuous": true }'
        aside
          ul 
            li That's the basics out the way
            li The critical feature is trivial replication
            li We'll look at this in more detail later
            li Unidirection database synchronization
            li Push or pull
            li Continuous
            li Managed with documents
            li Updated with replication process metadata + state
            li Deleted or changed to manipulate process itself

      section
        ul
          li Map/Reduce
          li Indexed Views
          li ACID (locally)
          li Erlang-based
          li Web UI
          li Show Functions
          li Filters
          li Validation

        aside
          ul
            li Irrelevant
            li But CouchDB is quite cool

      section
        h1 Resilient Infrastructure
        aside
          ul
            li What I really want to talk about
            li Fine as a document store
            li Shines when providing resilient infrastructure though
            li = reliable workable data storage through *anything*
            li Total network failure
            li clusters of rarely-connected machines
            li Intermittent power
            li Not relevant everywhere, but sometimes amazing

      section
        h2 Let's break everything!

        div.sideBySide
          pre
            code.language-bash.
              while true
              do
                vagrant halt couchdb-a --force
                sleep 30
                vagrant up couchdb-a --no-provision
                sleep 30

                vagrant halt couchdb-b --force
                sleep 30
                vagrant up couchdb-b --no-provision
                sleep 30
              done
          pre
            code.language-bash.
              while true
              do
                curl -X POST 'http://couchdb-A:5984/demo-db' \
                     -H "content-type: application/json" \
                     -d '{ "created_at": "'"`date`"'" }' \
                     --max-time 0.1

                curl -X POST 'http://couchdb-B:5984/demo-db' \
                     -H "content-type: application/json" \
                     -d '{ "created_at": "'"`date`"'" }' \
                     --max-time 0.1
              done
      section
        h2 Is this useful?

        aside
          ul
            li Large systems have to deal with external dependencies, unpredictability
            li Cloud computing, more widely-distributed systems increase unreliability
            li Mobile devices and networks are unreliable
            li Uptime is *important*, to everybody
            li Companies have to accept this: Netflix has a chaos monkey for example

      section
        h2 Real world example
        ul
          li B2B SaaS product, with strict SLAs
          li Millions of paying daily users
          li 3,000 servers across 25 datacentres
          li 50,000 requests per second, average
          li Highly latency sensitive
          li <strong>Every request needs the (readonly) user session</strong>

      section
        h2 Bonus challenges
        ul
          li Struggling network infrastructure
          li Frequent loss of connection to datacentres
          li Users can and do roam, worldwide
          li Server failover is always to a different datacenter

      section
        h2 Previous solution
        ul
          li Hold all user sessions in memory on every server
          li Announce new sessions to every server with a central message bus
          li Canonical store kept in a single RDBMS (for server initialisation)

      section
        h2 Real world problems
        ul
          li Memory usage doesn't scale
          li Network traffic doesn't scale
          li Network and server failures are big problems
          li RabbitMQ failures are catastrophic problems

      section
        h2 CouchDB solution
        ul
          li Small LRU cache in every server
          li CouchDB in every datacentre
          li CouchDB in the central datacentre
          li Hub &amp; spoke replication
          li Servers query local CouchDB by default, or fall back to central CouchDB

      section
        h2 Real World Improvements
        ul
          li No single point of failure
          li Scales easily horizontally
          li Major memory savings
    
      section
        h2 Some problems
        ul
          li Ops ramp-up
          li Support service setup
          li Disk usage

      section
        h2.full-slide Hood.ie

      section
        h2.todo Hood.ie

      section
        h2.full-slide Why does this work?

      section
        h2.full-slide Append-only B-trees

      section
        h2 Append-only B-trees
        div.todo B-TREE DIAGRAM

      section
        h2.full-slide Reliable Replication

      section
        h2 Reliable Replication
        ul
          li Master-master
          li Unidirectional
          li Versioned database

      section
        h2.full-slide
          | Multiversion
          | Concurrency
          | Control
        h3 (MVCC)
        aside
          ul
            li Distributed, so concurrent changes
            li Handled by versioning all changes
            li We'll look at sync later
            li Lockless, optimistic
            li Updates + deletes need a revision
            li Reject mismatches
            li Later conflicts pick arbitrary deterministic revision

      section
        h2 MVCC
        h1.todo GRAPH SHOWING MVCC

      section
        h2 Did we break everything?

        div.sideBySide
          pre
            code.language-bash.
              restart lots # TODO
          
          pre
            code.language-bash.
              other things # TODO

      section
        h2.full-slide Phew.

      section
        h2 CouchDB is not perfect

      section
        h2 But 'always available' is a great superpower

      section
        h2.full-slide Any questions?

        address.vcard
          div.author.fn Tim Perry
          div.note.bio
            span Tech Lead &amp; Open-Source Champion at 
            span.org.vcard
              a.org.fn.url(href='http://softwire.com',rel="group") Softwire
          ul.urls
            li
              a.url(href='http://tim-perry.co.uk',rel="me") tim-perry.co.uk
            li
              a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
            li
              a.url(href='http://github.com/pimterry',rel="me") github.com/pimterry

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-convenient/dist/bespoke-convenient.js')
    script(src='bower_components/bespoke-indexfinger/dist/bespoke-indexfinger.js')
    script(src='bower_components/bespoke-secondary/dist/bespoke-secondary.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/prism-bash-highlighting.js')
    script(src='scripts/main.js')
    // endbuild
